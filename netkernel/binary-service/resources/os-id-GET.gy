import org.netkernel.layer0.nkf.*
import static org.netkernel.layer0.nkf.INKFRequestReadOnly.*

import org.netkernel.mod.hds.*

INKFRequestContext context = context

id = context.getThisRequest ().getArgumentValue ("id")

try {
	req = context.createRequest ("active:osBinary")
	req.addArgument ("id", id)
	hash=context.source ("httpRequest:/header/IfNoneMatch", String.class);
	//println("IfNoneMatch: "+hash)
	if(hash!=null)
	{	req.addArgument ("hash", hash)
	}
	req.setVerb (VERB_SOURCE)
	hds = context.issueRequest(req)
	hds=hds.getReader().getFirstNode("/hds")
	
	rep=null
	code=null
	mimetype=null
	
	if(hds.getFirstValueOrNull("equal")!=null)
	{	rep=""	
		code=304
	}
	else
	{	x404=hds.getFirstValueOrNull("notfound")
		if(x404!=null)
		{	rep = "404: ${id} not found!".toString()
			code= 404
		}
		else
		{	rep=hds.getFirstValue("binary")
			code=200
			hash=hds.getFirstValue("hash")
		}
	}
	mimetype=hds.getFirstValueOrNull("/hds/mimetype")
	if(mimetype!=null  && context.source("httpRequest:/header/Accept")!=null && !context.source("httpRequest:/acceptable/"+mimetype))
	{	//Mimetype is not acceptable to client... 
		throw new UnacceptableContentTypeException("406 Mimetype not acceptable to client", mimetype)
	}
	
	resp=context.createResponseFrom (rep)
	resp.setHeader ("httpResponse:/code", code)
	resp.setHeader ("httpResponse:/header/Etag", "\""+hash+"\"")
	
	if(mimetype!=null)
	{	resp.setMimeType(mimetype)
	}
	
} catch (Exception e) {
	e.printStackTrace()
	throw e
}

def class UnacceptableContentTypeException extends ContentProcessingException
{
	UnacceptableContentTypeException (String message, String mimeType)
	{
		super (message, null,
			HDSFactory.newDocument()
				.pushNode ("exception")
				.addNode ("type", "UnacceptableContentType")
				.addNode ("code", 406)
				.addNode ("bad-content-type", mimeType))
	}
}

def abstract class ContentProcessingException extends Exception
{
	IHDSDocument representation;

	ContentProcessingException (String message, Throwable cause, IHDSMutator ex)
	{
		super (message, null)	// FixMe: should be able to pass cause along to super class constructor

		ex.addNode ("message", message)
		ex.addNode ("class", cause.getClass().getName())
		addCause (ex, cause)

		representation = ex.toDocument (false)
	}

	void addCause (IHDSMutator ex, Throwable cause)
	{
		if (cause == null) return

		ex.pushNode ("cause")
		ex.addNode ("message", cause.getMessage())
		ex.addNode ("class", cause.getClass().getName())
		ex.addNode ("name", cause.toString())
		// ToDo: Insert stack trace of cause here?

		addCause (ex, cause.getCause())

		ex.popNode()
	}

	IHDSDocument getHDS() { representation }
}
