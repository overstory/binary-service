<testlist>
<assertDefinition name="responseCode">
		<identifier>active:groovy</identifier>
		<argument name="operand">arg:test:response</argument>
		<argument name="code">arg:test:tagValue</argument>
		<argument name="operator">
		<literal type="string">
		<![CDATA[
		resp=context.source("arg:operand");
		code=resp.getHeader("HTTP_ACCESSOR_STATUS_CODE_METADATA")
		testcode=Integer.parseInt(context.source("arg:code"));
		//println(code+" "+testcode);
		context.createResponseFrom(code==testcode);
		]]>
		</literal>
		</argument>
	</assertDefinition>
	
	<assertDefinition name="startsWith">
		<identifier>active:groovy</identifier>
		<argument name="operand">arg:test:result </argument>
		<argument name="test">arg:test:tagValue</argument>
		<argument name="operator">
		<literal type="string">
		<![CDATA[
		rep=context.source("arg:operand");
		test=context.source("arg:test");
		context.createResponseFrom(rep.startsWith(test));
		]]>
		</literal>
		</argument>
	</assertDefinition>
	<assertDefinition name="stringLength">
		<identifier>active:groovy</identifier>
		<argument name="operand">arg:test:result</argument>
		<argument name="code">arg:test:tagValue</argument>
		<argument name="operator">
		<literal type="string">
		<![CDATA[
		resp=context.source("arg:operand");
		testcode=Integer.parseInt(context.source("arg:code"));
		println("STRING LENGTH TEST:"+ resp.length()+" "+testcode);
		test=resp.length()==testcode
		context.createResponseFrom(test);
		if(!test)
		{	context.sink("active:assert/Expected", testcode.toString());
			context.sink("active:assert/Received", resp.length().toString());		
		}
		]]>
		</literal>
		</argument>
	</assertDefinition>
</testlist>